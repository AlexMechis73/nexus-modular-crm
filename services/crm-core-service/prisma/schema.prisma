// services/crm-core-service/prisma/schema.prisma

generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- ENTITÀ PRINCIPALI ---

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  contacts     Contact[]
  leads        Lead[]
  orders       Order[]
  visits       Visit[]
  interactions Interaction[]
}

model Contact {
  id                   String        @id @default(cuid())
  firstName            String
  lastName             String
  email                String        @unique
  phone                String?
  company              String?
  ownerId              String
  owner                User          @relation(fields: [ownerId], references: [id])
  leads                Lead[]
  orders               Order[]
  visits               Visit[]
  interactions         Interaction[]
  
  newsletterSubscribed Boolean       @default(false)
  whatsappOptIn        Boolean       @default(false)
}

// --- FLUSSO PUSH (SALES PIPELINE) ---

model Lead {
  id           String        @id @default(cuid())
  title        String
  status       LeadStatus    @default(NEW)
  value        Float?
  source       String?
  ownerId      String
  owner        User          @relation(fields: [ownerId], references: [id])
  contactId    String
  contact      Contact       @relation(fields: [contactId], references: [id])
  proposals    Proposal[]
  interactions Interaction[]
  generatedOrder Order?
}

model Proposal {
  id           String        @id @default(cuid())
  version      Int
  status       ProposalStatus @default(DRAFT)
  value        Float
  filePath     String?
  sentDate     DateTime?
  expiresDate  DateTime?
  leadId       String
  lead         Lead          @relation(fields: [leadId], references: [id])
}

// --- FLUSSO PULL (E CONVERGENZA) ---

model Order {
  id             String      @id @default(cuid())
  orderDate      DateTime    @default(now())
  status         OrderStatus @default(PENDING_APPROVAL)
  totalValue     Float
  source         OrderSource @default(MANUAL)
  ownerId        String
  owner          User        @relation(fields: [ownerId], references: [id])
  contactId      String
  contact        Contact     @relation(fields: [contactId], references: [id])
  
  generatedFromLeadId String?  @unique
  generatedFromLead   Lead?    @relation(fields: [generatedFromLeadId], references: [id])
}

// --- ENTITÀ DI SUPPORTO E TRACCIAMENTO (Customer Journey) ---

model Visit {
  id                 String        @id @default(cuid())
  status             String
  visitDate          DateTime
  outcome            String?
  durationMinutes    Int?
  productsDiscussed  String?
  nextStep           String?
  notes              String?       @db.Text
  ownerId            String
  owner              User          @relation(fields: [ownerId], references: [id])
  contactId          String
  contact            Contact       @relation(fields: [contactId], references: [id])
}

model Interaction {
  id          String    @id @default(cuid())
  type        InteractionType
  date        DateTime  @default(now())
  notes       String?   @db.Text
  outcome     String?
  channel     String?
  ownerId     String
  owner       User      @relation(fields: [ownerId], references: [id])
  contactId   String
  contact     Contact   @relation(fields: [contactId], references: [id])
  leadId      String?
  lead        Lead?     @relation(fields: [leadId], references: [id])
}

// --- ENUMS PER LA GRANULARITÀ ---

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  FOLLOW_UP
  WON
  LOST
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  NEGOTIATING
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING_APPROVAL
  APPROVED
  PROCESSING
  SHIPPED
  DELIVERED
  INVOICED
  CANCELLED
}

enum OrderSource {
  MANUAL
  FROM_LEAD
  ECOMMERCE
}

enum InteractionType {
  EMAIL_SENT
  EMAIL_RECEIVED
  CALL_MADE
  CALL_RECEIVED
  VISIT_PLANNED
  VISIT_EXECUTED
  PROPOSAL_SENT
  NOTE_ADDED
  ORDER_PLACED
  ECOMMERCE_SESSION
}